package game;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Vector;

public class GameScene extends GameCanvas implements KeyListener {

	public final static int UP_PRESSED = 0x001;
	public final static int DOWN_PRESSED = 0x002;
	public final static int LEFT_PRESSED = 0x004;
	public final static int RIGHT_PRESSED = 0x008;
	public final static int FIRE_PRESSED = 0x010;

	int cnt;
	int keyBuff;
	int keyTime;
	int bgX, bgY;
	int playerX, playerY;
	int playerWidth, playerHeight;
	int myFrame;
	int bgWidth, bgHeight;
	boolean isPause;
	Vector bullets;
	int _speed;// 배경 스크롤 속도

	public GameScene(GameManager manager) {

		super(manager);

		manager.nowCanvas = (GameCanvas) this;
	}

	@Override
	public void dblpaint(Graphics gContext) {
		// TODO Auto-generated method stub

		// 배경을 그리고
		gContext.drawImage(bg, bgX, bgY, this);
		manager.drawImageRect(gContext, player, playerX, playerY, myFrame
				* playerWidth, 0, player.getWidth(null),
				player.getHeight(null), manager.ANC_LEFT);

	}

	@Override
	public void update() {
		// TODO Auto-generated method stub
		if (isPause)
			return;
		cnt++;
		keyProcess();
		myProcess();
	}

	@Override
	public void Destroy() {
		// TODO Auto-generated method stub
		super.Destroy();
		manager.remove(this);// GameManager의 firstScene에서 이 씬(클래스)을 add했으므로,
								// remove하여 제거한다.
		releaseImage();
	}

	Image bg;
	Image player;
	Image bullet;

	@Override
	public void initImage() {
		// TODO Auto-generated method stub
		addKeyListener(this);
		bg = manager.makeImage("img/bg.png");
		player = manager.makeImage("img/player.png");
	}

	@Override
	public void releaseImage() {
		// TODO Auto-generated method stub

		bg = null;
		player = null;
	}

	@Override
	public void SceneStart() {
		// TODO Auto-generated method stub
		// 별도의 씬 초기화를 위해 SceneStart를 오버라이드하고, 마지막에 super를 호출한다

		// 배경용 좌표 (계산하기 편하게)
		System.out.println(bgWidth);
		System.out.println(manager.SCREEN_WIDTH);
		bgWidth = 1920;
		bgHeight = 1200;
		bgX = -(bgWidth - manager.SCREEN_WIDTH) / 2;
		bgY = -(bgHeight - manager.SCREEN_HEIGHT) / 2;

		// 게임 관련 정보 초기화
		_speed = 6;// 배경 스크롤 속도

		// 플레이어 정보 초기화
		playerWidth = player.getWidth(this);
		playerHeight = player.getHeight(this);
		playerX = (manager.SCREEN_WIDTH - playerWidth) / 2;
		playerY = (manager.SCREEN_HEIGHT - playerHeight) / 2;
		myFrame = 0;

		bullets = new Vector();// 총알 관리. 총알의 갯수를 예상할 수 없기 때문에 가변적으로 관리한다.
		bullets.clear();
		isPause = false;
		super.SceneStart();
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub

		switch (e.getKeyCode()) {
		case KeyEvent.VK_W:
			keyBuff |= UP_PRESSED;
			break;

		case KeyEvent.VK_A:
			keyBuff |= LEFT_PRESSED;
			break;

		case KeyEvent.VK_S:
			keyBuff |= DOWN_PRESSED;
			break;

		case KeyEvent.VK_D:
			keyBuff |= RIGHT_PRESSED;
			break;
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_W:
			keyBuff &= ~UP_PRESSED;
			break;
		case KeyEvent.VK_A:
			keyBuff &= ~LEFT_PRESSED;
			break;
		case KeyEvent.VK_S:
			keyBuff &= ~DOWN_PRESSED;
			break;
		case KeyEvent.VK_D:
			keyBuff &= ~RIGHT_PRESSED;
			break;
		}
	}

	void processBullet() {
		UserBullet _buff;
		for (int i = 0; i < bullets.size(); i++) {
			_buff = (UserBullet) bullets.elementAt(i);

			// 방법 1
			int idx = _buff.process();

			switch (idx) {
			case UserBullet.NO_PROCESS:// 아무런 변화도 없다
				break;
			case UserBullet.MOVEOUT:// 화면 밖으로 사라졌다
				bullets.remove(i);
				break;
			}

			// //방법 2
			// _buff.process_another(this);
		}
	}
	void myProcess(){
		if (cnt % 20 == 0) {

			int _x = playerX + playerWidth / 2 - 12;
			int _y = playerY - 17;

			// 싱글샷
			UserBullet _bullet = new UserBullet(bullet,
					new Rectangle(6, 1, 12, 33), _x, _y, 1);
			bullets.add(_bullet);
		}
	}
	void keyProcess() {
		if ((keyBuff & LEFT_PRESSED) == LEFT_PRESSED) {
			if (bgX > -(bgWidth - manager.SCREEN_WIDTH) && bgX < 0) {
				bgX += _speed;
			} else if (bgX <= -(bgWidth - manager.SCREEN_WIDTH)) {
				if (playerX >= (manager.SCREEN_WIDTH - playerWidth) / 2)
					playerX -= _speed;
				else
					bgX += _speed;
			} else if (bgX >= 0) {
				if (playerX > 0)
					playerX -= _speed;
			}
		}

		if ((keyBuff & RIGHT_PRESSED) == RIGHT_PRESSED) {
			if (bgX > -(bgWidth - manager.SCREEN_WIDTH) && bgX < 0) {
				bgX -= _speed;
			} else if (bgX <= -(bgWidth - manager.SCREEN_WIDTH)) {
				if (playerX < manager.SCREEN_WIDTH - playerWidth)
					playerX += _speed;
			} else if (bgX >= 0) {
				if (playerX <= (manager.SCREEN_WIDTH - playerWidth) / 2)
					playerX += _speed;
				else
					bgX -= _speed;
			}
		}
		if ((keyBuff & UP_PRESSED) == UP_PRESSED) {
			if (bgY > -(bgHeight - manager.SCREEN_HEIGHT) && bgY < 0) {
				bgY += _speed;
			} else if (bgY <= -(bgHeight - manager.SCREEN_HEIGHT)) {
				if (playerY >= (manager.SCREEN_HEIGHT - playerHeight) / 2)
					playerY -= _speed;
				else
					bgY += _speed;
			} else if (bgY >= 0) {
				if (playerY > 0)
					playerY -= _speed;
			}
		}
		if ((keyBuff & DOWN_PRESSED) == DOWN_PRESSED) {
			if (bgY > -(bgHeight - manager.SCREEN_HEIGHT) && bgY < 0) {
				bgY -= _speed;
			} else if (bgY <= -(bgHeight - manager.SCREEN_HEIGHT)) {
				if (playerY < manager.SCREEN_HEIGHT - playerHeight)
					playerY += _speed;
			} else if (bgY >= 0) {
				if (playerY <= (manager.SCREEN_HEIGHT - playerHeight) / 2)
					playerY += _speed;
				else
					bgY -= _speed;
			}
		}
	}
}
